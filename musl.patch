diff --git a/include/endian.h b/include/endian.h
index 172c4320..9c745ece 100644
--- a/include/endian.h
+++ b/include/endian.h
@@ -28,7 +28,7 @@ static __inline uint32_t __bswap32(uint32_t __x)
 
 static __inline uint64_t __bswap64(uint64_t __x)
 {
-	return __bswap32(__x)+0ULL<<32 | __bswap32(__x>>32);
+	return (__bswap32(__x)+0ULL)<<32 | __bswap32(__x>>32);
 }
 
 #if __BYTE_ORDER == __LITTLE_ENDIAN
diff --git a/include/math.h b/include/math.h
index 14f28ec8..bcb19851 100644
--- a/include/math.h
+++ b/include/math.h
@@ -65,39 +65,18 @@ static __inline unsigned long long __DOUBLE_BITS(double __f)
 	return __u.__i;
 }
 
-#define fpclassify(x) ( \
-	sizeof(x) == sizeof(float) ? __fpclassifyf(x) : \
-	sizeof(x) == sizeof(double) ? __fpclassify(x) : \
-	__fpclassifyl(x) )
-
-#define isinf(x) ( \
-	sizeof(x) == sizeof(float) ? (__FLOAT_BITS(x) & 0x7fffffff) == 0x7f800000 : \
-	sizeof(x) == sizeof(double) ? (__DOUBLE_BITS(x) & -1ULL>>1) == 0x7ffULL<<52 : \
-	__fpclassifyl(x) == FP_INFINITE)
-
-#define isnan(x) ( \
-	sizeof(x) == sizeof(float) ? (__FLOAT_BITS(x) & 0x7fffffff) > 0x7f800000 : \
-	sizeof(x) == sizeof(double) ? (__DOUBLE_BITS(x) & -1ULL>>1) > 0x7ffULL<<52 : \
-	__fpclassifyl(x) == FP_NAN)
-
-#define isnormal(x) ( \
-	sizeof(x) == sizeof(float) ? ((__FLOAT_BITS(x)+0x00800000) & 0x7fffffff) >= 0x01000000 : \
-	sizeof(x) == sizeof(double) ? ((__DOUBLE_BITS(x)+(1ULL<<52)) & -1ULL>>1) >= 1ULL<<53 : \
-	__fpclassifyl(x) == FP_NORMAL)
-
-#define isfinite(x) ( \
-	sizeof(x) == sizeof(float) ? (__FLOAT_BITS(x) & 0x7fffffff) < 0x7f800000 : \
-	sizeof(x) == sizeof(double) ? (__DOUBLE_BITS(x) & -1ULL>>1) < 0x7ffULL<<52 : \
-	__fpclassifyl(x) > FP_INFINITE)
+int fpclassify(double);
+
+int isfinite(double x);
+int isinf(double x);
+int isnan(double x);
+int isnormal(double x);
 
 int __signbit(double);
 int __signbitf(float);
 int __signbitl(long double);
 
-#define signbit(x) ( \
-	sizeof(x) == sizeof(float) ? (int)(__FLOAT_BITS(x)>>31) : \
-	sizeof(x) == sizeof(double) ? (int)(__DOUBLE_BITS(x)>>63) : \
-	__signbitl(x) )
+int signbit(double);
 
 #define isunordered(x,y) (isnan((x)) ? ((void)(y),1) : isnan((y)))
 
@@ -200,6 +179,7 @@ double      expm1(double);
 float       expm1f(float);
 long double expm1l(long double);
 
+int         abs(int);
 double      fabs(double);
 float       fabsf(float);
 long double fabsl(long double);
diff --git a/include/stdio.h b/include/stdio.h
index 3604198c..ba195062 100644
--- a/include/stdio.h
+++ b/include/stdio.h
@@ -25,11 +25,13 @@ extern "C" {
 
 #include <bits/alltypes.h>
 
+#ifndef NULL
 #ifdef __cplusplus
 #define NULL 0L
 #else
 #define NULL ((void*)0)
 #endif
+#endif
 
 #undef EOF
 #define EOF (-1)
diff --git a/include/stdlib.h b/include/stdlib.h
index 7af86e3b..a1c6b948 100644
--- a/include/stdlib.h
+++ b/include/stdlib.h
@@ -7,11 +7,13 @@ extern "C" {
 
 #include <features.h>
 
+#ifndef NULL
 #ifdef __cplusplus
 #define NULL 0L
 #else
 #define NULL ((void*)0)
 #endif
+#endif
 
 #define __NEED_size_t
 #define __NEED_wchar_t
diff --git a/include/string.h b/include/string.h
index 795a2abc..df0b98b9 100644
--- a/include/string.h
+++ b/include/string.h
@@ -7,11 +7,13 @@ extern "C" {
 
 #include <features.h>
 
+#ifndef NULL
 #ifdef __cplusplus
 #define NULL 0L
 #else
 #define NULL ((void*)0)
 #endif
+#endif
 
 #define __NEED_size_t
 #if defined(_POSIX_SOURCE) || defined(_POSIX_C_SOURCE) \
diff --git a/include/time.h b/include/time.h
index 5494df18..1b180245 100644
--- a/include/time.h
+++ b/include/time.h
@@ -7,11 +7,13 @@ extern "C" {
 
 #include <features.h>
 
+#ifndef NULL
 #ifdef __cplusplus
 #define NULL 0L
 #else
 #define NULL ((void*)0)
 #endif
+#endif
 
 
 #define __NEED_size_t
diff --git a/include/wchar.h b/include/wchar.h
index 88eb55b1..9d03ca25 100644
--- a/include/wchar.h
+++ b/include/wchar.h
@@ -38,11 +38,13 @@ extern "C" {
 #define WCHAR_MIN (-1-0x7fffffff+L'\0')
 #endif
 
+#ifndef NULL
 #ifdef __cplusplus
 #define NULL 0L
 #else
 #define NULL ((void*)0)
 #endif
+#endif
 
 #undef WEOF
 #define WEOF 0xffffffffU
diff --git a/src/ctype/isalpha.c b/src/ctype/isalpha.c
index a87a9375..b3598f53 100644
--- a/src/ctype/isalpha.c
+++ b/src/ctype/isalpha.c
@@ -1,14 +1,6 @@
 #include <ctype.h>
 #undef isalpha
 
-int isalpha(int c)
-{
-	return ((unsigned)c|32)-'a' < 26;
+int isalpha(int c) {
+	return ((unsigned) c | 32) - 'a' < 26;
 }
-
-int __isalpha_l(int c, locale_t l)
-{
-	return isalpha(c);
-}
-
-weak_alias(__isalpha_l, isalpha_l);
diff --git a/src/ctype/isdigit.c b/src/ctype/isdigit.c
index 16beddb4..a682ec66 100644
--- a/src/ctype/isdigit.c
+++ b/src/ctype/isdigit.c
@@ -1,14 +1,6 @@
 #include <ctype.h>
 #undef isdigit
 
-int isdigit(int c)
-{
-	return (unsigned)c-'0' < 10;
+int isdigit(int c) {
+	return (unsigned) c - '0' < 10;
 }
-
-int __isdigit_l(int c, locale_t l)
-{
-	return isdigit(c);
-}
-
-weak_alias(__isdigit_l, isdigit_l);
diff --git a/src/ctype/isspace.c b/src/ctype/isspace.c
index 428813e7..6bbbd337 100644
--- a/src/ctype/isspace.c
+++ b/src/ctype/isspace.c
@@ -1,14 +1,6 @@
 #include <ctype.h>
 #undef isspace
 
-int isspace(int c)
-{
-	return c == ' ' || (unsigned)c-'\t' < 5;
+int isspace(int c) {
+	return c == ' ' || (unsigned) c - '\t' < 5;
 }
-
-int __isspace_l(int c, locale_t l)
-{
-	return isspace(c);
-}
-
-weak_alias(__isspace_l, isspace_l);
diff --git a/src/errno/__errno_location.c b/src/errno/__errno_location.c
index 7f9d6027..f89b37a0 100644
--- a/src/errno/__errno_location.c
+++ b/src/errno/__errno_location.c
@@ -1,9 +1,15 @@
 #include <errno.h>
 #include "pthread_impl.h"
 
+int errno;
+
 int *__errno_location(void)
 {
-	return &__pthread_self()->errno_val;
+	return &errno;
+	// return &__pthread_self()->errno_val;
 }
 
-weak_alias(__errno_location, ___errno_location);
+int *___errno_location(void) {
+	return &errno;
+	// return &__pthread_self()->errno_val;
+}
diff --git a/src/math/__fpclassify.c b/src/math/__fpclassify.c
index f7c0e2df..a672f2db 100644
--- a/src/math/__fpclassify.c
+++ b/src/math/__fpclassify.c
@@ -9,3 +9,27 @@ int __fpclassify(double x)
 	if (e==0x7ff) return u.i<<12 ? FP_NAN : FP_INFINITE;
 	return FP_NORMAL;
 }
+
+int fpclassify(double x) {
+	return __fpclassify(x);
+}
+
+int signbit(double x) {
+	return __signbit(x);
+}
+
+int isfinite(double x) {
+	return (__DOUBLE_BITS(x) & -1ULL>>1) < 0x7ffULL<<52;
+}
+
+int isinf(double x) {
+	return (__DOUBLE_BITS(x) & -1ULL>>1) == 0x7ffULL<<52;
+}
+
+int isnan(double x) {
+	return (__DOUBLE_BITS(x) & -1ULL>>1) > 0x7ffULL<<52;
+}
+
+int isnormal(double x) {
+	return ((__DOUBLE_BITS(x)+(1ULL<<52)) & -1ULL>>1) >= 1ULL<<53;
+}
diff --git a/src/string/memchr.c b/src/string/memchr.c
index 65f0d789..431c4246 100644
--- a/src/string/memchr.c
+++ b/src/string/memchr.c
@@ -10,7 +10,7 @@
 
 void *memchr(const void *src, int c, size_t n)
 {
-	const unsigned char *s = src;
+	const unsigned char *s = (const unsigned char *) src;
 	c = (unsigned char)c;
 #ifdef __GNUC__
 	for (; ((uintptr_t)s & ALIGN) && n && *s != c; s++, n--);
@@ -18,8 +18,8 @@ void *memchr(const void *src, int c, size_t n)
 		typedef size_t __attribute__((__may_alias__)) word;
 		const word *w;
 		size_t k = ONES * c;
-		for (w = (const void *)s; n>=SS && !HASZERO(*w^k); w++, n-=SS);
-		s = (const void *)w;
+		for (w = (const word *)s; n>=SS && !HASZERO(*w^k); w++, n-=SS);
+		s = (const unsigned char *)w;
 	}
 #endif
 	for (; n && *s != c; s++, n--);
diff --git a/src/string/memcmp.c b/src/string/memcmp.c
index bdbce9f0..6a2706cd 100644
--- a/src/string/memcmp.c
+++ b/src/string/memcmp.c
@@ -2,7 +2,7 @@
 
 int memcmp(const void *vl, const void *vr, size_t n)
 {
-	const unsigned char *l=vl, *r=vr;
+	const unsigned char *l = (const unsigned char *) vl, *r = (const unsigned char *) vr;
 	for (; n && *l == *r; n--, l++, r++);
 	return n ? *l-*r : 0;
 }
diff --git a/src/string/memcpy.c b/src/string/memcpy.c
index 06e88742..4dfbc0d9 100644
--- a/src/string/memcpy.c
+++ b/src/string/memcpy.c
@@ -2,21 +2,15 @@
 #include <stdint.h>
 #include <endian.h>
 
-void *memcpy(void *restrict dest, const void *restrict src, size_t n)
+#include "Print.h"
+
+extern "C" void *memcpy(void *restrict dest, const void *restrict src, size_t n)
 {
-	unsigned char *d = dest;
-	const unsigned char *s = src;
+	unsigned char *d = (unsigned char *) dest;
+	const unsigned char *s = (const unsigned char *) src;
 
+	/*
 #ifdef __GNUC__
-
-#if __BYTE_ORDER == __LITTLE_ENDIAN
-#define LS >>
-#define RS <<
-#else
-#define LS <<
-#define RS >>
-#endif
-
 	typedef uint32_t __attribute__((__may_alias__)) u32;
 	uint32_t w, x;
 
@@ -55,14 +49,15 @@ void *memcpy(void *restrict dest, const void *restrict src, size_t n)
 		*d++ = *s++;
 		n -= 3;
 		for (; n>=17; s+=16, d+=16, n-=16) {
+			// strprint("n: "); asm("<prd %0> \n <prc %1>" :: "r"(n), "r"('\n'));
 			x = *(u32 *)(s+1);
-			*(u32 *)(d+0) = (w LS 24) | (x RS 8);
+			*(u32 *)(d+0) = (w >> 24) | (x << 8);
 			w = *(u32 *)(s+5);
-			*(u32 *)(d+4) = (x LS 24) | (w RS 8);
+			*(u32 *)(d+4) = (x >> 24) | (w << 8);
 			x = *(u32 *)(s+9);
-			*(u32 *)(d+8) = (w LS 24) | (x RS 8);
+			*(u32 *)(d+8) = (w >> 24) | (x << 8);
 			w = *(u32 *)(s+13);
-			*(u32 *)(d+12) = (x LS 24) | (w RS 8);
+			*(u32 *)(d+12) = (x >> 24) | (w << 8);
 		}
 		break;
 	case 2:
@@ -71,14 +66,15 @@ void *memcpy(void *restrict dest, const void *restrict src, size_t n)
 		*d++ = *s++;
 		n -= 2;
 		for (; n>=18; s+=16, d+=16, n-=16) {
+			// strprint("n: "); asm("<prd %0> \n <prc %1>" :: "r"(n), "r"('\n'));
 			x = *(u32 *)(s+2);
-			*(u32 *)(d+0) = (w LS 16) | (x RS 16);
+			*(u32 *)(d+0) = (w >> 16) | (x << 16);
 			w = *(u32 *)(s+6);
-			*(u32 *)(d+4) = (x LS 16) | (w RS 16);
+			*(u32 *)(d+4) = (x >> 16) | (w << 16);
 			x = *(u32 *)(s+10);
-			*(u32 *)(d+8) = (w LS 16) | (x RS 16);
+			*(u32 *)(d+8) = (w >> 16) | (x << 16);
 			w = *(u32 *)(s+14);
-			*(u32 *)(d+12) = (x LS 16) | (w RS 16);
+			*(u32 *)(d+12) = (x >> 16) | (w << 16);
 		}
 		break;
 	case 3:
@@ -86,14 +82,15 @@ void *memcpy(void *restrict dest, const void *restrict src, size_t n)
 		*d++ = *s++;
 		n -= 1;
 		for (; n>=19; s+=16, d+=16, n-=16) {
+			// strprint("n: "); asm("<prd %0> \n <prc %1>" :: "r"(n), "r"('\n'));
 			x = *(u32 *)(s+3);
-			*(u32 *)(d+0) = (w LS 8) | (x RS 24);
+			*(u32 *)(d+0) = (w >> 8) | (x << 24);
 			w = *(u32 *)(s+7);
-			*(u32 *)(d+4) = (x LS 8) | (w RS 24);
+			*(u32 *)(d+4) = (x >> 8) | (w << 24);
 			x = *(u32 *)(s+11);
-			*(u32 *)(d+8) = (w LS 8) | (x RS 24);
+			*(u32 *)(d+8) = (w >> 8) | (x << 24);
 			w = *(u32 *)(s+15);
-			*(u32 *)(d+12) = (x LS 8) | (w RS 24);
+			*(u32 *)(d+12) = (x >> 8) | (w << 24);
 		}
 		break;
 	}
@@ -118,6 +115,7 @@ void *memcpy(void *restrict dest, const void *restrict src, size_t n)
 	}
 	return dest;
 #endif
+	//*/
 
 	for (; n; n--) *d++ = *s++;
 	return dest;
diff --git a/src/string/memmove.c b/src/string/memmove.c
index 5dc9cdb9..f70733b3 100644
--- a/src/string/memmove.c
+++ b/src/string/memmove.c
@@ -8,8 +8,8 @@ typedef __attribute__((__may_alias__)) size_t WT;
 
 void *memmove(void *dest, const void *src, size_t n)
 {
-	char *d = dest;
-	const char *s = src;
+	char *d = (char *) dest;
+	const char *s = (const char *) src;
 
 	if (d==s) return d;
 	if ((uintptr_t)s-(uintptr_t)d-n <= -2*n) return memcpy(d, s, n);
diff --git a/src/string/strlen.c b/src/string/strlen.c
index 309990f0..1d80c4af 100644
--- a/src/string/strlen.c
+++ b/src/string/strlen.c
@@ -14,8 +14,8 @@ size_t strlen(const char *s)
 	typedef size_t __attribute__((__may_alias__)) word;
 	const word *w;
 	for (; (uintptr_t)s % ALIGN; s++) if (!*s) return s-a;
-	for (w = (const void *)s; !HASZERO(*w); w++);
-	s = (const void *)w;
+	for (w = (const word *)s; !HASZERO(*w); w++);
+	s = (const char *)w;
 #endif
 	for (; *s; s++);
 	return s-a;
diff --git a/src/string/x86_64/memcpy.s b/src/string/x86_64/memcpy.s
index 3d960efa..aa495768 100644
--- a/src/string/x86_64/memcpy.s
+++ b/src/string/x86_64/memcpy.s
@@ -1,3 +1,4 @@
+//*
 .global memcpy
 .global __memcpy_fwd
 .hidden __memcpy_fwd
@@ -23,3 +24,4 @@ __memcpy_fwd:
 	dec %edx
 	jnz 2b
 1:	ret
+//*/
