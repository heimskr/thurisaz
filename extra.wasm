#meta

name: "Thurisaz Extra"

#text

%data

@__errno__
%8b 0

@__assertion_failed
%stringz "Assertion failed!\n"

@__pure_virtual_called
%stringz "Pure virtual function called!\n"

@__abort_message
%stringz "Aborted.\n"

@__atexit_count
%8b 0

@__atexit_fns
%fill 4096 0

@__atexit_args
%fill 4096 0

@__atexit_dso_handles
%fill 4096 0

%code

@int_system
	$sp -> $k2
	$k1 -> $sp

	$a0 == 0 -> $m0
	: int_system.term if $m0
	<p "Invalid syscall: ">
	<prd $a0>
	<prc '\n'>
	<halt>

	@int_system.term
	%setpt $k4
	%page on
	$k0 -> $a0
	:: terminate_process
	:: kernel_loop

	@int_system.end
	$k2 -> $sp
	$e0 += 8
	: ] %page $e0

@int_timer
	1 -> $kf
	$kf -> [timer_expired] /b
	// $e0 += 8 // TODO!: verify
	: ] %page $e0

@__cxa_atexit
	// $m1 = __atexit_count;
	&__atexit_count -> $m3
	[$m3] -> $m1

	// if (512 <= __atexit_count) halt();
	$m1 >= 512 -> $m2
	: __cxa_atexit.perish if $m2

	// offset = __atexit_count * 8;
	$m1 << 3 -> $m2

	// *(__atexit_fns + offset) = fn;
	&__atexit_fns -> $m0
	$m0 += $m2
	$a0 -> [$m0]

	// *(__atexit_args + offset) = arg;
	&__atexit_args -> $m0
	$m0 += $m2
	$a1 -> [$m0]

	// *(__atexit_dso_handles + offset) = arg;
	&__atexit_dso_handles -> $m0
	$m0 += $m2
	$a2 -> [$m0]

	// ++__atexit_count;
	$m1++
	$m1 -> [$m3]

	: $rt

	@__cxa_atexit.perish
	<p "__cxa_atexit: overflow\n">
	<halt>

@_Z17___errno_locationv
	&__errno__ -> $r0
	: $rt

@__assert_fail
	&__assertion_failed -> $a0
	:: strprint
	<halt>

@main
	? mem -> $sp
	$sp / 2 -> $sp
	0xcafef00d -> $fp
	:: kernel_main
	[__atexit_count] -> $m0
	@main.atexit.loop
		$m0 <= 0 -> $m1
		: main.halt if $m1
		$m0--
		$m0 << 3 -> $m1
		&__atexit_fns -> $m2
		$m2 += $m1
		[$m2] -> $m2
		&__atexit_args -> $a0
		$a0 += $m1
		[$a0] -> $a0
		&__atexit_dso_handles -> $a1
		$a1 += $m1
		[$a1] -> $a1
		:: $m2
		: main.atexit.loop
	@main.halt
	<p "Halted.\n">
	<halt>

@__cxa_pure_virtual
	&__pure_virtual_called -> $a0
	:: strprint
	<halt>

@llvm.ctlz.i64
	[ $t0 // i
	[ $t1 // mask
	[ $t2 // -1

	63 -> $t0
	0 -> $r0
	$0 - 1 -> $t2

	@__llvm.ctlz.i64_loop
		1 -> $t1
		$t1 << $t0 -> $t1
		$a0 & $t1 -> $t1
		: __llvm.ctlz.i64_done if $t1
		$r0++
		$t0--
		$t0 == $t2 -> $t1
		: __llvm.ctlz.i64_done if $t1
		: __llvm.ctlz.i64_loop
	@__llvm.ctlz.i64_done

	] $t2
	] $t1
	] $t0
	: $rt

@llvm.ctlz.i32
	[ $t0 // i
	[ $t1 // mask
	[ $t2 // -1

	31 -> $t0
	0 -> $r0
	$0 - 1 -> $t2

	@__llvm.ctlz.i32_loop
		1 -> $t1
		$t1 << $t0 -> $t1
		$a0 & $t1 -> $t1
		: __llvm.ctlz.i32_done if $t1
		$r0++
		$t0--
		$t0 == $t2 -> $t1
		: __llvm.ctlz.i32_done if $t1
		: __llvm.ctlz.i32_loop
	@__llvm.ctlz.i32_done

	] $t2
	] $t1
	] $t0
	: $rt

@llvm.fshl.i32
	lui: 0 -> $a0
	lui: 0 -> $a1
	$a2 %= 32
	$a0 <<= 32
	$a0 | $a1 -> $r0
	$r0 <<= $a2
	$r0 >>>= 32
	: $rt

@llvm.fshl.i8
	$a0 &= 0xff
	$a1 &= 0xff
	$a2 %= 8
	$a0 <<= 8
	$a0 | $a1 -> $r0
	$r0 <<= $a2
	$r0 >>>= 8
	$r0 &= 0xff
	: $rt

@llvm.trap
	&__abort_message -> $a0
	:: strprint
	<halt>

@llvm.umul.with.overflow.i64
	$a0 * $a1 /u
	$lo -> $r0
	$hi == 0 -> $r1
	!$r1 -> $r1
	: $rt
